<?xml version="1.0"?>
<ruleset name="buck"
    xmlns="http://pmd.sf.net/ruleset/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
    xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
  <description>Rules for the Buck project.</description>

  <!--
  Visit https://github.com/pmd/pmd/tree/master/pmd-java/src/main/resources/rulesets/java
  for ruleset definitions. Note that Buck is currently built with PMD 5.0.3.
  -->

  <rule ref="rulesets/java/basic.xml" />
  <rule ref="rulesets/java/empty.xml" />

  <rule ref="rulesets/java/imports.xml">
    <!--
      Excluded because tests that use both JUnit and EasyMock tend to
      statically import many methods, which we allow.
    -->
    <exclude name="TooManyStaticImports" />
  </rule>

  <rule ref="rulesets/java/coupling.xml/LooseCoupling" />

  <rule ref="rulesets/java/junit.xml">
    <!-- This is not practical. -->
    <exclude name="JUnitAssertionsShouldIncludeMessage" />

    <!-- Unclear what an appropriate upper bound would be. -->
    <exclude name="JUnitTestContainsTooManyAsserts" />

    <!--
      Not practical: pure EasyMock tests or tests that exclusively assert
      using MoreAsserts.* should not need to be annotated with this.
    -->
    <exclude name="JUnitTestsShouldIncludeAssert" />
  </rule>

  <rule ref="rulesets/java/unusedcode.xml">
    <!--
      Including the public keyword in interface methods is acceptable: this
      makes it easier to copy/paste them.
    -->
    <exclude name="UnusedModifier" />

    <!-- This rule is buggy (http://sourceforge.net/p/pmd/bugs/792/ and others). -->
    <exclude name="UnusedPrivateMethod" />
  </rule>

  <rule ref="rulesets/java/optimizations.xml">
    <exclude name="AvoidInstantiatingObjectsInLoops" />
    <exclude name="LocalVariableCouldBeFinal" />
    <exclude name="MethodArgumentCouldBeFinal" />
    <exclude name="RedundantFieldInitializer" />
    <exclude name="UseStringBufferForStringAppends" />
    <exclude name="SimplifyStartsWith" />
  </rule>

  <rule name="BuckStyleImmutableMustBePackagePrivate"
        message="@BuckStyleImmutable value types must be package-private"
        class="net.sourceforge.pmd.lang.rule.XPathRule"
        language="java">
    <description>Value types decorated with @BuckStyleImmutable must be package-private (i.e., not public or private).

The build will automatically generate a public subclass or implementation of your value type. All clients should use that API, so the parent value type should limit its visibility as much as possible.</description>
    <priority>1</priority>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //ClassOrInterfaceDeclaration[@PackagePrivate='false']
              [parent::TypeDeclaration[Annotation/MarkerAnnotation/Name/@Image='Value.Immutable']]
              [ancestor::TypeDeclaration[Annotation/MarkerAnnotation/Name/@Image='BuckStyleImmutable']]
          ]]>
        </value>
      </property>
    </properties>
    <example>
      <![CDATA[
// OK
@Value.Immutable
@BuckStyleImmutable
interface AbstractFoo {

}

// Bad: uses public visibility
@Value.Immutable
@BuckStyleImmutable
public class AbstractBar {

}

// Bad: uses public visibility
@Value.Immutable
@BuckStyleImmutable
public interface AbstractBaz {

}

  ]]>
    </example>
  </rule>
  <rule name="BuckStyleImmutableNameMustStartWithAbstract"
        message="Name of @BuckStyleImmutable value types must start with Abstract"
        class="net.sourceforge.pmd.lang.rule.XPathRule"
        language="java">
    <description>Value types decorated with @BuckStyleImmutable must have a name starting with 'Abstract'

The build will automatically generate a subclass or implementation of your value type without 'Abstract' in the name.</description>
    <priority>1</priority>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //ClassOrInterfaceDeclaration[not(starts-with(@Image,'Abstract'))]
              [parent::TypeDeclaration[Annotation/MarkerAnnotation/Name/@Image='Value.Immutable']]
              [ancestor::TypeDeclaration[Annotation/MarkerAnnotation/Name/@Image='BuckStyleImmutable']]
          ]]>
        </value>
      </property>
    </properties>
    <example>
      <![CDATA[
// OK
@Value.Immutable
@BuckStyleImmutable
interface AbstractFoo {

}

// Bad: name does not start with Abstract
@Value.Immutable
@BuckStyleImmutable
interface Bar {

}
      ]]>
    </example>
  </rule>
</ruleset>

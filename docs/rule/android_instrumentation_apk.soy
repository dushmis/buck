{namespace android_instrumentation_apk}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'android_instrumentation_apk()' /}
    {param prettify: true /}
    {param description}
      A rule that generates an Android Instrumentation APK.
    {/param}
    {param content}
{call buck.rule}
{param status: 'UNFROZEN' /}
{param overview}
<p>
An <code>android_instrumentation_apk()</code> rule is used to generate
an Android Instrumentation APK.
</p>
<p>
Android's <a
href="http://developer.android.com/tools/testing/testing_android.html">
Testing Fundamentals</a> documentation includes a diagram that shows
the relationship between an "application package" and a "test package"
when running a test. This rule corresponds to a test package. Note
that a test package has an interesting quirk where it is <em>compiled
against</em> an application package, but <em>must not include</em> the
resources or Java classes of the application package.  Therefore, this
class takes responsibility for making sure the appropriate bits are
excluded.  Failing to do so will generate mysterious runtime errors
when running the test.
</p>
{/param}

{param args}

{call buck.arg}
  {param name: 'name' /}
  {param desc}
  The name of the rule, as well as the name of the APK generated by
  this rule.
  {/param}
{/call}

{call android_common.manifest_apk_arg /}

{call buck.arg}
  {param name: 'apk' /}
  {param desc}
  APK build target, which should be used for the instrumentation APK.
  Can be either a {call buck.android_binary /} or a
  {sp}{call buck.apk_genrule /}.
  {/param}
{/call}

{call android_common.deps_apk_arg /}

{/param} // close args

{param examples}
Here is an example of an <code>android_instrumentation_apk()</code>
rule that tests a <code>android_binary()</code>, and depends on a test
package.

{literal}<pre class="prettyprint lang-py">
android_library(
  name = 'test',
  srcs = glob(['test/**/*.java']),
)

android_binary(
  name = 'messenger',
  manifest = 'AndroidManifest.xml',
  keystore = '//keystores:prod',
  package_type = 'release',
  proguard_config = 'proguard.cfg',
  deps = [
    ...
  ],
)

# Building this rule will produce a file named messenger_test.apk
android_instrumentation_apk(
  name = 'messenger_test',
  manifest = 'AndroidInstrumentationManifest.xml',
  apk = ':messenger',
  deps = [
    ':test',
  ],
)
</pre>{/literal}
{/param}

{/call} // close buck.rule

    {/param}
  {/call}
{/template}

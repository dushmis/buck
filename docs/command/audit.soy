{namespace buck.audit}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'buck audit' /}
    {param prettify: true /}
    {param description}
      Provide build information about build targets and outputs.
    {/param}
    {param content}

{call buck.command}
{param overview}
Provide build information about build targets and outputs.

<p>

<pre>buck audit input /&#x2F;java/com/example/app:amazing</pre>

<h2>Commands</h2>

<ul class="{css arglist}">
  {call buck.param}
    {param name: 'alias --list' /}
    {param nodash: true /}
    {param desc}
    Lists the set of aliases declared in
    either <tt>.buckconfig</tt> or <tt>.buckconfig.local</tt>.
    (Currently, <tt>--list</tt> is the only flag supported
    by <tt>buck audit alias</tt>, but we are considering others.)
   {/param}
  {/call}

  {call buck.param}
    {param name: 'classpath <targets>' /}
    {param nodash: true /}
    {param desc}
    Lists the classpath used to build the given targets. This does
    not work for all build rule types.
    {/param}
  {/call}

  {call buck.param}
    {param name: 'dependencies <targets>' /}
    {param nodash: true /}
    {param desc}
    Lists the dependencies used to build the given targets. Results are listed
    in alphabetical order. By default, only direct dependencies are listed.
    To show transitive dependencies, use the <code>--transitive</code> flag.
    To show tests for a rule, use the <code>--include-tests</code> flag. This
    prints out a rule's tests as if they were a dependency of the rule.
    Combined with the <code>--transitive</code> flag, this will print out all
    of the test's dependencies as well.
    {/param}
  {/call}

  {call buck.param}
    {param name: 'input <targets>' /}
    {param nodash: true /}
    {param desc}
    Lists the input source and resource files used to build the
    given targets.
   {/param}
  {/call}

  {call buck.param}
    {param name: 'tests <targets>' /}
    {param nodash: true /}
    {param desc}
    Lists the tests for the given targets. Results are listed in alphabetical
    order. Only tests for the given targets are printed, though multiple
    targets may be provided at once. This command is meant to be used in
    conjunction with the <code>audit dependencies</code> command. For example,
    to retrieve a list of all tests for a given project, use
    <br>
    <br>
    <pre>
    buck audit dependencies --transitive PROJECT | xargs buck audit tests
    </pre>
    {/param}
  {/call}
</ul>
{/param}

{param params}

{call buck.param}
  {param name: 'json' /}
  {param desc}
  Outputs the results as JSON.
  {/param}
{/call}

{/param}

{param examples}

<pre class="prettyprint lang-py">
{literal}
# For all of the following examples, assume this BUCK file exists in
# the `examples` directory.
java_library(
  name = 'one',
  srcs = [ '1.txt' ],
  deps = [
    ':two',
    ':three',
  ],
)

java_library(
  name = 'two',
  srcs = [ '2.txt' ],
  deps = [
    ':four',
  ],
)

java_library(
  name = 'three',
  srcs = [ '3.txt' ],
  deps = [
    ':four',
    ':five',
  ],
)

java_library(
  name = 'four',
  srcs = [ '4.txt' ],
  deps = [
    ':five',
  ]
)

java_library(
  name = 'five',
  srcs = [ '5.txt' ],
)
{/literal}
</pre>

Lists all of the source files used to build the <code>one</code> library
<pre>buck audit input /&#x2F;examples:one</pre>
<pre>
examples/1.txt{\n}
examples/2.txt{\n}
examples/3.txt{\n}
examples/4.txt{\n}
examples/5.txt{\n}
</pre>

Outputs a JSON representation of all of the source files used to build the{sp}
<code>two</code> library. In this JSON object, each key is a build target and
each value is an array of the source paths used to build that rule.
<pre>buck audit input --json /&#x2F;examples:two</pre>
<pre class="prettyprint lang-js">
{literal}
{
  "//examples:two": ["examples/2.txt"],
  "//examples:four": ["examples/4.txt"],
  "//examples:five": ["examples/5.txt"],
}
{/literal}
</pre>

Lists all of the rules that the <code>one</code> library directly depends on
<pre>buck audit dependencies /&#x2F;examples:one</pre>
<pre>
{literal}
//examples:three
//examples:two
{/literal}
</pre>

Lists all of the rules that the <code>one</code> library transitively depends on
<pre>buck audit dependencies --transitive /&#x2F;examples:one</pre>
<pre>
{literal}
//examples:five
//examples:four
//examples:three
//examples:two
{/literal}
</pre>

Outputs a JSON representation of all of the rules that the <code>two</code>{sp}
library transitively depends on.
<pre>buck audit dependencies --transitive --json /&#x2F;examples:two</pre>
<pre class="prettyprint lang-js">
{literal}
{
  "//examples:two": ["//examples:five","//examples:four"]
}
{/literal}
</pre>

Outputs a JSON representation of the direct dependencies of the{sp}
<code>two</code> and <code>three</code> libraries.
<pre>buck audit dependencies --json /&#x2F;examples:two /&#x2F;examples:three</pre>
<pre class="prettyprint lang-js">
{literal}
{
  "//examples:three": ["//examples:five","//examples:four"],
  "//examples:two": ["//examples:four"]
}
{/literal}
</pre>

{/param}

{/call}

    {/param}  // content
  {/call} // buck.page
{/template}
